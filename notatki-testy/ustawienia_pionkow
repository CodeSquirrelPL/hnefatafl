ustawienia planszy

do gry

      x = white[0][0];
      y = white[0][1];
      board[x][y].set(1);

      for (i=1; i<13; i++)
      {
        x = white[i][0];
        y = white[i][1];
        board[x][y].set(2);
      }

      for (i=0; i<24; i++)
      {
        x = black[i][0];
        y = black[i][1];
        board[x][y].set(3);
      }

do testowania [podwójnego] shieldwall

      x = white[0][0];
      y = white[0][1];
      board[x][y].set(1);

      move=1;
      board[10][2].set(2);
      board[10][3].set(3);
      board[9][3].set(2);
      board[10][4].set(3);
      board[9][4].set(2);
      board[10][5].set(3);
      board[9][5].set(2);
      board[10][6].set(2);

      board[2][10].set(2);
      board[3][10].set(3);
      board[3][9].set(2);
      board[4][10].set(3);
      board[4][9].set(2);
      board[5][10].set(3);
      board[5][9].set(2);
      board[6][10].set(2);

      board[1][0].set(2);
      board[2][0].set(3);
      board[2][1].set(2);
      board[3][0].set(3);
      board[3][1].set(2);
      board[4][0].set(3);
      board[4][1].set(2);

      board[5][1].set(2);
      board[6][0].set(3);
      board[6][1].set(2);
      board[7][0].set(3);
      board[7][1].set(2);
      board[8][0].set(3);
      board[8][1].set(2);

      board[9][0].set(2);

      board[0][2].set(2);
      board[0][3].set(3);
      board[1][3].set(2);
      board[0][4].set(3);
      board[1][4].set(2);
      board[0][5].set(3);
      board[1][5].set(2);
      board[0][6].set(2);






shieldwall bez notatek i console.log


function shieldwall(x,y,d)	{	//d==0 - pionek uruchomiający funkcję jest przy krawędzi planszy; d==1 - pionek jest jedno pole od krawędzi

// pionek przy krawędzi planszy jako punkt odniesienia

	if (d==1) {
		if (x==9 && board[10][y].whoseCounter()==(move+1)%2+1) {
			if (y!=0 && board[10][y-1].whoseCounter()==move%2+1) {x=10; y=y-1;}
			else if (y!=10 && board[10][y+1].whoseCounter()==move%2+1) {x=10; y=y+1;}
			else if (y!=0 && board[9][y-1].whoseCounter()==move%2+1) return shieldwall(9, y-1, 1);
			else if (y!=10 && board[9][y+1].whoseCounter()==move%2+1) return shieldwall(9, y+1, 1);
		}
		else if (x==1 && board[0][y].whoseCounter()==(move+1)%2+1) {
			if (y!=0 && board[0][y-1].whoseCounter()==move%2+1) {x=0; y=y-1;}
			else if (y!=10 && board[0][y+1].whoseCounter()==move%2+1) {x=0; y=y+1;}
			else if (y!=0 && board[1][y-1].whoseCounter()==move%2+1) return shieldwall(1, y-1, 1);
			else if (y!=10 && board[1][y+1].whoseCounter()==move%2+1) return shieldwall(1, y+1, 1);
		}
		else if (y==9 && board[x][10].whoseCounter()==(move+1)%2+1) {
			if (x!=0 && board[x-1][10].whoseCounter()==move%2+1) {x=x-1; y=10;}
			else if (x!=10 && board[x+1][10].whoseCounter()==move%2+1) {x=x+1; y=10;}
			else if (x!=0 && board[x-1][9].whoseCounter()==move%2+1) return shieldwall(x-1, 9, 1);
			else if (x!=10 && board[x+1][9].whoseCounter()==move%2+1) return shieldwall(x+1, 9, 1);
		}
		else if (y==1 && board[x][0].whoseCounter()==(move+1)%2+1) {
			if (x!=0 && board[x-1][0].whoseCounter()==move%2+1) {x=x-1; y=0;}
			else if (x!=10 && board[x+1][0].whoseCounter()==move%2+1) {x=x+1; y=0;}
			else if (x!=0 && board[x-1][1].whoseCounter()==move%2+1) return shieldwall(x-1, 1, 1);
			else if (x!=10 && board[x+1][1].whoseCounter()==move%2+1) return shieldwall(x+1, 1, 1);
		}
		else return 0;
	}


if (x%10==0 && ((y!=10 && board[x][y+1].whoseCounter()==(move+1)%2+1) || (y!=0 && board[x][y-1].whoseCounter()==(move+1)%2+1)))	{
			if (board[x][y+1].whoseCounter()==(move+1)%2+1) j=1;
			else if (board[x][y-1].whoseCounter()==(move+1)%2+1) j=-1;
			i=0;
		}
else if (y%10==0 && ((x!=10 && board[x+1][y].whoseCounter()==(move+1)%2+1) || (x!=0 && board[x-1][y].whoseCounter()==(move+1)%2+1))) {
			j=0;
			if (board[x+1][y].whoseCounter()==(move+1)%2+1) i=1;
			else if (board[x-1][y].whoseCounter()==(move+1)%2+1) i=-1;
		}
else return 0;

//i oraz j przechowują odległość i kierunek pola badanego od pola, na którym stoi figura, której przesunięcie uruchomiło funkcję

	if (j==0) {if (y==0) d=1; if (y==10) d=-1;}
	else if (i==0) {if (x==0) d=1; if (x==10) d=-1;}

		do {
			if (i==j && j==0 || (i!=0 && j!=0)) break;
			if (j==0)	{	//	j==0 -> przesunięcie odbywa się wzdłuż osi x -> sprawdzaj [x+i][y+d]
			if (i<0) i--; if (i>0) i++;
						}

			if (i==0)	{
				if (board[x+d][y+j].whoseCounter()!=(move)%2+1) return "nope";
				if (j>0) j++; if (j<0) j--;
			}
		} while (board[x+i][y+j].whoseCounter()==(move+1)%2+1);

		if (board[x+(i^0)][y+(j^0)].whoseCounter()==(move)%2+1)	{
			if (j<0) j++; if (j>0) j--;
			if (i<0) i++; if (i>0) i--;
				do {
					striking(x+i, y+j);
					if (j<0) j++; if (j>0) j--;
					if (i<0) i++; if (i>0) i--;
				} while (i || j);

				if ((x%10==0 && ((y!=10 && board[x][y+1].whoseCounter()==(move+1)%2+1) || (y!=0 && board[x][y-1].whoseCounter()==(move+1)%2+1))) || (y%10==0 && ((x!=10 && board[x+1][y].whoseCounter()==(move+1)%2+1) || (x!=0 && board[x-1][y].whoseCounter()==(move+1)%2+1)))) shieldwall(x, y, 0);

				}
		else return 0;
}






do {
  if (i!=0 && j!=0) break;

  if (j==0)	{	//	j==0 -> przesunięcie odbywa się wzdłuż osi x -> sprawdzaj [x+i][y+d]
    if (board[x+i][y+d].isThisMine()!=1) return "nope";
    if (i<0) i--; if (i>0) i++;	}

  if (i==0)	{
    if (board[x+d][y+j].isThisMine()!=1) return "nope";
    if (j>0) j++; if (j<0) j--;	}
} while (board[x+i][y+j].isThisMine()==0);














































function shieldwall(x,y,d)	{	//d==0 - pionek uruchomiający funkcję jest przy krawędzi planszy; d==1 - pionek jest jedno pole od krawędzi
/*
	if (d==0)	{

		if (x%10==0)	{ console.log("x%10==0");
			if (y<8 && board[x][y+1].isThisMine()==0)	{
				if (x==10 && board[9][y+1].isThisMine()==1) shieldwall_2(9, y+1, 1);
				if (x==0 && board[1][y+1].isThisMine()==1) shieldwall_2(1, y+1, 1);
			}
			if (y>2 && board[x][y-1].isThisMine()==0)	{
				if (x==10 && board[9][y-1].isThisMine()==1) shieldwall_2(9, y-1, 1);
				if (x==0 && board[1][y-1].isThisMine()==1) shieldwall_2(1, y-1, 1);
			}
		}

		else if (y%10==0)	{	console.log("y%10==0");
			if (x<8 && board[x+1][y].isThisMine()==0)	{ console.log("y%10==0 && this +1 ain't mine");
				if (y==10 && board[x+1][9].isThisMine()==1) shieldwall_2(x+1, 9, 1);
				if (y==0 && board[x-1][1].isThisMine()==1) shieldwall_2(x-1, 1, 1);
			}
			if (x<8 && board[x-1][y].isThisMine()==0)	{	console.log("y%10==0 && this -1 ain't mine");
				if (y==10 && board[x-1][9].isThisMine()==1) shieldwall_2(x+1, 9, 1);
				if (y==0 && board[x+1][1].isThisMine()==1) shieldwall_2(x-1, 1, 1);
			}
		}
	}*/

// jeśli pionek nie jest przy krawędzi planszy - pionek przy krawędzi planszy jako punkt odniesienia

	if (d==1) {
		if (x==9 && board[10][y].isThisMine()==0) {
			if (y!=0 && board[10][y-1].isThisMine()==1) {x=10; y=y-1;}
			else if (y!=10 && board[10][y+1].isThisMine()==1) {x=10; y=y+1;}
			else if (y!=0 && board[9][y-1].isThisMine()==1) return shieldwall(9, y-1, 1);
			else if (y!=10 && board[9][y+1].isThisMine()==1) return shieldwall(9, y+1, 1);
		}
		else if (x==1 && board[0][y].isThisMine()==0) {
			if (y!=0 && board[0][y-1].isThisMine()==1) {x=0; y=y-1;}
			else if (y!=10 && board[0][y+1].isThisMine()==1) {x=0; y=y+1;}
			else if (y!=0 && board[1][y-1].isThisMine()==1) return shieldwall(1, y-1, 1);
			else if (y!=10 && board[1][y+1].isThisMine()==1) return shieldwall(1, y+1, 1);
		}
		else if (y==9 && board[x][10].isThisMine()==0) {
			if (x!=0 && board[x-1][10].isThisMine()==1) {x=x-1; y=10;}
			else if (x!=10 && board[x+1][10].isThisMine()==1) {x=x+1; y=10;}
			else if (x!=0 && board[x-1][9].isThisMine()==1) return shieldwall(x-1, 9, 1);
			else if (x!=10 && board[x+1][9].isThisMine()==1) return shieldwall(x+1, 9, 1);
		}
		else if (y==1 && board[x][0].isThisMine()==0) {
			if (x!=0 && board[x-1][0].isThisMine()==1) {x=x-1; y=0;}
			else if (x!=10 && board[x+1][0].isThisMine()==1) {x=x+1; y=0;}
			else if (x!=0 && board[x-1][1].isThisMine()==1) return shieldwall(x-1, 1, 1);
			else if (x!=10 && board[x+1][1].isThisMine()==1) return shieldwall(x+1, 1, 1);
		}
		else return 0;
	}


if (x%10==0 && ((y!=10 && board[x][y+1].isThisMine()==0) || (y!=0 && board[x][y-1].isThisMine()==0)))	{
			if (board[x][y+1].isThisMine()==0) j=1;
			else if (board[x][y-1].isThisMine()==0) j=-1;
			i=0;
		}
else if (y%10==0 && ((x!=10 && board[x+1][y].isThisMine()==0) || (x!=0 && board[x-1][y].isThisMine()==0))) {
			j=0;
			if (board[x+1][y].isThisMine()==0) i=1;
			else if (board[x-1][y].isThisMine()==0) i=-1;
		}
else return 0;

//i oraz j przechowują odległość i kierunek pola badanego od pola, na którym stoi figura, której przesunięcie uruchomiło funkcję

	if (j==0) {if (y==0) d=1; if (y==10) d=-1;}
	else if (i==0) {if (x==0) d=1; if (x==10) d=-1;}

		do {
			if (i==j && j==0 || (i!=0 && j!=0)) break;
			if (j==0)	{	//	j==0 -> przesunięcie odbywa się wzdłuż osi x -> sprawdzaj [x+i][y+d]
					if (i<0) i--; if (i>0) i++;
				}

			if (i==0)	{
					if (board[x+d][y+j].isThisMine()!=1) return "nope";
					if (j>0) j++; if (j<0) j--;
				}
		} while (board[x+i][y+j].isThisMine()==0);


//usuwanie pionków
		if (board[x+i][y+j].isThisMine()==1)	{
			if (j<0) j++; if (j>0) j--;
			if (i<0) i++; if (i>0) i--;
				do {
					striking(x+i, y+j);
					if (j<0) j++; if (j>0) j--;
					if (i<0) i++; if (i>0) i--;
				} while (i || j);

				if ((x%10==0 && ((y!=10 && board[x][y+1].isThisMine()==0) || (y!=0 && board[x][y-1].isThisMine()==0))) || (y%10==0 && ((x!=10 && board[x+1][y].isThisMine()==0) || (x!=0 && board[x-1][y].isThisMine()==0)))) shieldwall(x, y, 0);

				}
		else return 0;
}
